{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\SWE\\\\RepoCodice\\\\CodeBusters-HDviz\\\\src\\\\components\\\\SP.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; //import d3Tip from \"d3-tip\";\n\nimport { scaleLinear, max, min, axisLeft, axisBottom, select, scalePoint } from \"d3\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScatterPlot(props) {\n  _s();\n\n  let xAxis, yAxis, chartArea, xScale, yScale;\n  const drawWidth = props.width - props.margin.left - props.margin.right;\n  const drawHeight = props.height - props.margin.top - props.margin.bottom;\n  useEffect(() => {\n    update();\n  });\n\n  function updateScales() {\n    // Calculate limits\n    let xMin = min(props.data, d => +d.x - 0.1 * d.x);\n    let xMax = max(props.data, d => +d.x + 0.1 * d.x);\n    let yMin = min(props.data, d => +d.y - 0.1 * d.y);\n    let yMax = max(props.data, d => +d.y + 0.1 * d.y);\n\n    if (!xMin && !xMax) {\n      let xDomain = props.data.map(d => d.x);\n      xScale = scalePoint().domain([...new Set(xDomain)]).range([0, drawWidth]);\n    } else {\n      xScale = scaleLinear().domain([xMin, xMax]).range([0, drawWidth]);\n    }\n\n    if (!yMin && !yMax) {\n      let yDomain = props.data.map(d => d.y);\n      yScale = scalePoint().domain([...new Set(yDomain)]).range([0, drawHeight]);\n    } else {\n      yScale = scaleLinear().domain([yMax, yMin]).range([0, drawHeight]);\n    }\n  }\n\n  function updatePoints() {\n    // Define hovers \n    // Add tip\n\n    /*var tip = d3Tip().attr('class', 'd3-tip').html(function (d) {\r\n        return d.label;\r\n    });\r\n    console.log(\"tip: \", tip)\r\n    */\n    // Select all circles and bind data\n    let circles = select(chartArea).selectAll('circle').data(props.data); // Use the .enter() method to get your entering elements, and assign their positions\n\n    circles.enter().append('circle').merge(circles).attr('r', props.radius).attr('fill', props.color).attr('label', d => d.label) //.on('mouseover', () => {alert(\"spostati\")})\n    //.on('mouseout', tip.hide)\n    .style('fill-opacity', 0.3).transition().duration(500).attr('cx', d => xScale(d.x)).attr('cy', d => yScale(d.y)).style('stroke', \"black\").style('stroke-width', d => d.selected == true ? \"3px\" : \"0px\"); // Use the .exit() and .remove() methods to remove elements that are no longer in the data\n\n    circles.exit().remove(); // Add hovers using the d3-tip library        \n    //select(chartArea).call(tip);\n  }\n\n  function updateAxes() {\n    let xAxisFunction = axisBottom(xScale) //.scale(xScale)\n    .ticks(5, 's');\n    let yAxisFunction = axisLeft(yScale) //.scale(yScale)\n    .ticks(5, 's');\n    select(xAxis).call(xAxisFunction);\n    select(yAxis).call(yAxisFunction);\n  }\n\n  function update() {\n    updateScales();\n    updateAxes();\n    updatePoints();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-secondary p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"chart\",\n      width: props.width,\n      height: props.height,\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        transform: `translate(${props.margin.left},15)`,\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        ref: node => {\n          chartArea = node;\n        },\n        transform: `translate(${props.margin.left}, ${props.margin.top})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        ref: node => {\n          xAxis = node;\n        },\n        transform: `translate(${props.margin.left}, ${props.height - props.margin.bottom})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        ref: node => {\n          yAxis = node;\n        },\n        transform: `translate(${props.margin.left}, ${props.margin.top})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"axis-label\",\n        transform: `translate(${props.margin.left + drawWidth / 2}, \n                    ${props.height - props.margin.bottom + 30})`,\n        children: props.xTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"axis-label\",\n        transform: `translate(${props.margin.left - 30}, \n                    ${drawHeight / 2 + props.margin.top}) rotate(-90)`,\n        children: props.yTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ScatterPlot, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ScatterPlot;\nScatterPlot.propTypes = {\n  data: PropTypes.array,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  radius: PropTypes.number,\n  color: PropTypes.string,\n  margin: PropTypes.object,\n  xTitle: PropTypes.string,\n  yTitle: PropTypes.string,\n  title: PropTypes.string\n};\nScatterPlot.defaultProps = {\n  data: [{\n    x: 10,\n    y: 20\n  }, {\n    x: 15,\n    y: 35\n  }],\n  width: 600,\n  height: 600,\n  radius: 5,\n  color: \"blue\",\n  margin: {\n    left: 50,\n    right: 10,\n    top: 20,\n    bottom: 50\n  },\n  xTitle: \"X Title\",\n  yTitle: \"Y Title\",\n  title: \"Prova\"\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/SWE/RepoCodice/CodeBusters-HDviz/src/components/SP.js"],"names":["React","useEffect","scaleLinear","max","min","axisLeft","axisBottom","select","scalePoint","PropTypes","ScatterPlot","props","xAxis","yAxis","chartArea","xScale","yScale","drawWidth","width","margin","left","right","drawHeight","height","top","bottom","update","updateScales","xMin","data","d","x","xMax","yMin","y","yMax","xDomain","map","domain","Set","range","yDomain","updatePoints","circles","selectAll","enter","append","merge","attr","radius","color","label","style","transition","duration","selected","exit","remove","updateAxes","xAxisFunction","ticks","yAxisFunction","call","title","node","xTitle","yTitle","propTypes","array","number","string","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\n//import d3Tip from \"d3-tip\";\r\nimport { scaleLinear, max, min, axisLeft, axisBottom, select, scalePoint} from \"d3\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function ScatterPlot (props) {\r\n    let xAxis, yAxis, chartArea, xScale, yScale;\r\n    const drawWidth = props.width - props.margin.left - props.margin.right;\r\n    const drawHeight = props.height - props.margin.top - props.margin.bottom;\r\n    useEffect(() => {\r\n        update();\r\n    });\r\n    function updateScales() {\r\n        // Calculate limits\r\n        let xMin = min(props.data, (d) => +d.x - (0.1*d.x));\r\n        let xMax = max(props.data, (d) => +d.x + (0.1*d.x));\r\n        let yMin = min(props.data, (d) => +d.y - (0.1*d.y));\r\n        let yMax = max(props.data, (d) => +d.y + (0.1*d.y));\r\n\r\n        if(!xMin && !xMax){\r\n            let xDomain = props.data.map(d => d.x);\r\n            xScale = scalePoint().domain([... new Set(xDomain)]).range([0, drawWidth]);\r\n        }else{\r\n            xScale = scaleLinear().domain([xMin, xMax]).range([0, drawWidth]);\r\n        }\r\n\r\n        if(!yMin && !yMax){\r\n            let yDomain = props.data.map(d => d.y);\r\n            yScale = scalePoint().domain([... new Set(yDomain)]).range([0, drawHeight]);\r\n\r\n        }else{\r\n            yScale = scaleLinear().domain([yMax, yMin]).range([0, drawHeight]);\r\n        }\r\n            \r\n    }\r\n    function updatePoints() {\r\n        // Define hovers \r\n        // Add tip\r\n        /*var tip = d3Tip().attr('class', 'd3-tip').html(function (d) {\r\n            return d.label;\r\n        });\r\n        console.log(\"tip: \", tip)\r\n        */\r\n        // Select all circles and bind data\r\n        let circles = select(chartArea).selectAll('circle').data(props.data);\r\n\r\n        // Use the .enter() method to get your entering elements, and assign their positions\r\n        circles.enter().append('circle')\r\n            .merge(circles)\r\n            .attr('r', props.radius)\r\n            .attr('fill', props.color)\r\n            .attr('label', (d) => d.label)\r\n            //.on('mouseover', () => {alert(\"spostati\")})\r\n            //.on('mouseout', tip.hide)\r\n            .style('fill-opacity', 0.3)\r\n            .transition().duration(500)\r\n            .attr('cx', (d) => xScale(d.x))\r\n            .attr('cy', (d) => yScale(d.y))\r\n            .style('stroke', \"black\")\r\n            .style('stroke-width', (d) => d.selected == true ? \"3px\" : \"0px\")\r\n\r\n\r\n        // Use the .exit() and .remove() methods to remove elements that are no longer in the data\r\n        circles.exit().remove();\r\n\r\n        // Add hovers using the d3-tip library        \r\n        //select(chartArea).call(tip);\r\n    }\r\n    function updateAxes() {\r\n        let xAxisFunction = axisBottom(xScale)\r\n            //.scale(xScale)\r\n            .ticks(5, 's');\r\n\r\n        let yAxisFunction = axisLeft(yScale)\r\n            //.scale(yScale)\r\n            .ticks(5, 's');\r\n\r\n        select(xAxis)\r\n            .call(xAxisFunction);\r\n\r\n        select(yAxis)\r\n            .call(yAxisFunction);\r\n    }\r\n    function update() {\r\n        updateScales();\r\n        updateAxes();\r\n        updatePoints();\r\n    }\r\n    \r\n    return (\r\n        <div className=\"bg-secondary p-4\">\r\n            <svg className=\"chart\" width={props.width} height={props.height}>\r\n                <text transform={`translate(${props.margin.left},15)`}>{props.title}</text>\r\n                <g ref={(node) => {chartArea = node; }}\r\n                    transform={`translate(${props.margin.left}, ${props.margin.top})`} />\r\n\r\n                {/* Axes */}\r\n                <g ref={(node) => { xAxis = node; }}\r\n                    transform={`translate(${props.margin.left}, ${props.height - props.margin.bottom})`}></g>\r\n                <g ref={(node) => { yAxis = node; }}\r\n                    transform={`translate(${props.margin.left}, ${props.margin.top})`}></g>\r\n\r\n                {/* Axis labels */}\r\n                <text className=\"axis-label\" transform={`translate(${props.margin.left + drawWidth / 2}, \r\n                    ${props.height - props.margin.bottom + 30})`}>{props.xTitle}</text>\r\n\r\n                <text className=\"axis-label\" transform={`translate(${props.margin.left - 30}, \r\n                    ${drawHeight / 2 + props.margin.top}) rotate(-90)`}>{props.yTitle}</text>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\nScatterPlot.propTypes = {\r\n    data : PropTypes.array,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n    radius: PropTypes.number,\r\n    color: PropTypes.string,\r\n    margin: PropTypes.object,\r\n    xTitle: PropTypes.string,\r\n    yTitle: PropTypes.string,\r\n    title: PropTypes.string\r\n}\r\nScatterPlot.defaultProps = {\r\n    data: [{ x: 10, y: 20 }, { x: 15, y: 35 }],\r\n    width: 600,\r\n    height: 600,\r\n    radius: 5,\r\n    color: \"blue\",\r\n    margin: {\r\n        left: 50,\r\n        right: 10,\r\n        top: 20,\r\n        bottom: 50\r\n    },\r\n    xTitle: \"X Title\",\r\n    yTitle: \"Y Title\",\r\n    title: \"Prova\"\r\n};"]},"metadata":{},"sourceType":"module"}