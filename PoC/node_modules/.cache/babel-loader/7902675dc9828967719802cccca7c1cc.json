{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\SWE\\\\RepoCodice\\\\CodeBusters-HDviz\\\\src\\\\components\\\\CsvReader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSVReader } from 'react-papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyCSVReader(props) {\n  //prendo il file ricevuto dal CSV reader e preparo un array contentente i dati e uno contentene le dimensioni\n  function handleOnDrop(data) {\n    let columns = data.shift().data; //Salvo la prima riga del file che contiene i nomi delle dimensioni\n\n    let parsedData = [];\n    data.forEach(val => {\n      //Scorro ogni riga del file\n      var line = new Object();\n\n      if (val.data != \"\") {\n        //controllo se la riga esiste\n        for (let i = 0; i < val.data.length; i++) {\n          //ciclo su tutti i valori della riga\n          if (val.data[i] == \"\") //controllo se il valore é diverso da null\n            line[columns[i]] = \"undefined\"; //se un valore é vuoto lo metto ad undefined\n          else line[columns[i]] = +val.data[i] ? +val.data[i] : val.data[i]; //se il valore é numerico lo salvo come numerico, altrimenti come stringa\n        }\n\n        parsedData.push(line); //riempio un array l'oggetto appena creato\n      }\n    }); //per ogni dimensione vado a costruire un oggetto e raccolgo tutto in un array\n\n    let dims = columns.map(tempDim => ({\n      \"value\": tempDim,\n      \"isChecked\": true,\n      \"toRedux\": true,\n      \"isRedux\": false,\n      \"isNumeric\": +parsedData[0][tempDim] ? true : false\n    }));\n    props.onChange(parsedData, dims);\n  }\n\n  function handleOnError(err)\n  /*file, inputElem, reason*/\n  {\n    console.log(err);\n  }\n\n  function handleOnRemoveFile(data) {\n    props.onChange(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CSVReader, {\n    onDrop: handleOnDrop,\n    onError: handleOnError,\n    addRemoveButton: true,\n    removeButtonColor: \"#ff0000\",\n    onRemoveFile: handleOnRemoveFile,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Drop CSV file here or click to upload.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n_c = MyCSVReader;\nMyCSVReader.propTypes = {\n  onChange: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCSVReader\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/SWE/RepoCodice/CodeBusters-HDviz/src/components/CsvReader.js"],"names":["React","PropTypes","CSVReader","MyCSVReader","props","handleOnDrop","data","columns","shift","parsedData","forEach","val","line","Object","i","length","push","dims","map","tempDim","onChange","handleOnError","err","console","log","handleOnRemoveFile","propTypes","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,eAAe,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC1C;AACA,WAASC,YAAT,CAAsBC,IAAtB,EAA2B;AACzB,QAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,GAAaF,IAA3B,CADyB,CACQ;;AACjC,QAAIG,UAAU,GAAG,EAAjB;AACAH,IAAAA,IAAI,CAACI,OAAL,CAAaC,GAAG,IAAG;AAAG;AACpB,UAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;;AACA,UAAGF,GAAG,CAACL,IAAJ,IAAU,EAAb,EAAgB;AAAE;AAChB,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACL,IAAJ,CAASS,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AAAE;AAC1C,cAAGH,GAAG,CAACL,IAAJ,CAASQ,CAAT,KAAa,EAAhB,EAAoB;AAClBF,YAAAA,IAAI,CAACL,OAAO,CAACO,CAAD,CAAR,CAAJ,GAAmB,WAAnB,CADF,CACsC;AADtC,eAGEF,IAAI,CAACL,OAAO,CAACO,CAAD,CAAR,CAAJ,GAAoB,CAACH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAF,GAAiB,CAACH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAlB,GAAgCH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAnD,CAJsC,CAI0B;AACnE;;AACDL,QAAAA,UAAU,CAACO,IAAX,CAAgBJ,IAAhB,EAPc,CAOU;AACzB;AACF,KAXD,EAHyB,CAezB;;AACA,QAAIK,IAAI,GAAGV,OAAO,CAACW,GAAR,CAAaC,OAAD,KAAc;AAAC,eAASA,OAAV;AAAmB,mBAAa,IAAhC;AAAsC,iBAAU,IAAhD;AAAsD,iBAAW,KAAjE;AAAwE,mBAAc,CAACV,UAAU,CAAC,CAAD,CAAV,CAAcU,OAAd,CAAF,GAA4B,IAA5B,GAAmC;AAAxH,KAAd,CAAZ,CAAX;AACAf,IAAAA,KAAK,CAACgB,QAAN,CAAeX,UAAf,EAA2BQ,IAA3B;AACD;;AAED,WAASI,aAAT,CAAuBC,GAAvB;AAA4B;AAA4B;AACtDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,WAASG,kBAAT,CAA4BnB,IAA5B,EAAiC;AAC/BF,IAAAA,KAAK,CAACgB,QAAN,CAAed,IAAf;AACD;;AAEC,sBACE,QAAC,SAAD;AACE,IAAA,MAAM,EAAED,YADV;AAEE,IAAA,OAAO,EAAEgB,aAFX;AAGE,IAAA,eAAe,MAHjB;AAIE,IAAA,iBAAiB,EAAC,SAJpB;AAKE,IAAA,YAAY,EAAEI,kBALhB;AAAA,2BAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAWH;KAzCuBtB,W;AA2CxBA,WAAW,CAACuB,SAAZ,GAAwB;AACtBN,EAAAA,QAAQ,EAAGnB,SAAS,CAAC0B;AADC,CAAxB","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\nexport default function MyCSVReader( props ){\r\n  //prendo il file ricevuto dal CSV reader e preparo un array contentente i dati e uno contentene le dimensioni\r\n  function handleOnDrop(data){\r\n    let columns = data.shift().data; //Salvo la prima riga del file che contiene i nomi delle dimensioni\r\n    let parsedData = []; \r\n    data.forEach(val =>{  //Scorro ogni riga del file\r\n      var line = new Object();\r\n      if(val.data!=\"\"){ //controllo se la riga esiste\r\n        for (let i = 0; i < val.data.length; i++) { //ciclo su tutti i valori della riga\r\n          if(val.data[i]==\"\") //controllo se il valore é diverso da null\r\n            line[columns[i]] = \"undefined\";     //se un valore é vuoto lo metto ad undefined\r\n          else\r\n            line[columns[i]] = (+val.data[i]) ? +val.data[i] : val.data[i]; //se il valore é numerico lo salvo come numerico, altrimenti come stringa\r\n        }\r\n        parsedData.push(line);  //riempio un array l'oggetto appena creato\r\n      }\r\n    });\r\n    //per ogni dimensione vado a costruire un oggetto e raccolgo tutto in un array\r\n    let dims = columns.map((tempDim) => ({\"value\": tempDim, \"isChecked\": true, \"toRedux\":true, \"isRedux\": false ,\"isNumeric\": (+parsedData[0][tempDim]) ? true : false}))\r\n    props.onChange(parsedData, dims);\r\n  }\r\n\r\n  function handleOnError(err, /*file, inputElem, reason*/){\r\n    console.log(err)\r\n  }\r\n\r\n  function handleOnRemoveFile(data){\r\n    props.onChange(data)\r\n  }\r\n\r\n    return (\r\n      <CSVReader\r\n        onDrop={handleOnDrop}\r\n        onError={handleOnError}\r\n        addRemoveButton\r\n        removeButtonColor='#ff0000'\r\n        onRemoveFile={handleOnRemoveFile}\r\n      >\r\n        <span>Drop CSV file here or click to upload.</span>\r\n      </CSVReader>\r\n    )\r\n}\r\n\r\nMyCSVReader.propTypes = {\r\n  onChange : PropTypes.func\r\n}"]},"metadata":{},"sourceType":"module"}